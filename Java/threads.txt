Executors and ExecutionService
 Instead of directly calling start(), let the ExecutionService manage.
 example:
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new MyCallable());
        executorService.shutdown(); //shutdown is not killing or stopping a thread.
                                    // It simply means executor service will not take any more request.
//Calling executorService.submit after shutdown will result in RejectedExecutionException

--------------
Runnable vs Callable
class MyRunnable implements Runnable{

    @Override
    public void run() {
        System.out.println("run");
    }
}

//call() has flexibility of throwing exception and returning value 
class MyCallable implements Callable<Integer>{
    @Override
    public Integer call() throws Exception {  //example method: primeNumberGenerator, randomNumberGenerator
        System.out.println("call");           //Any method that doesnt need an input but returns an output.
        return 1;                             // Still have limitation of not able to take input.
    }
}



-------------------------

Future - Since Java 1.5


Return of submit(Callable<T> task) is Future. 
f.get()); //Waits until the task is done, then prints 1
f.isDone()); //Return true or false

A Future represents the result of an asynchronous computation.
Methods are provided to check if the computation is complete, 
to wait for its completion, and to retrieve the result of the computation. 

The result can only be retrieved using method get when the computation has completed, 
blocking if necessary until it is ready. Cancellation is performed by the cancel method.
Additional methods are provided to determine if the task completed normally or was cancelled. 
Once a computation has completed, the computation cannot be cancelled. 

If you would like to use a Future for the sake of cancellability but not provide a usable result,
you can declare types of the form Future<?> and return null as a result of the underlying task.

Future<Integer> future = executor.submit(c);
      try {
         Integer result = future.get(); //wait for a thread to complete
         System.out.println(result);
      } catch(ExecutionException e) {
         e.printStackTrace();
      }
---------------------------

CompletableFuture[supplyAsync... thenApply] - since Java 1.8
If I have five futures generated after callable finished its task. How can I ensure futures sequence - use CompletableFuture


public static class MySupplier implements Supplier<Integer> {

    @Override
    public Integer get() {
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            //Do nothing
        }
        return 1;
    }
}

/**
* A (pure) function that adds one to a given Integer
**/
public static class PlusOne implements Function<Integer, Integer> {

    @Override
    public Integer apply(Integer x) {
        return x + 1;
    }
}

public static void main(String[] args) throws Exception {
    ExecutorService exec = Executors.newSingleThreadExecutor();
    CompletableFuture<Integer> f = CompletableFuture.supplyAsync(new MySupplier(), exec);
    //Note the executor as a param to supplyAsync in above line. So we can still use 
    //different thread pool models (Single thread, cached thread etc.)

    System.out.println(f.isDone()); // False
    CompletableFuture<Integer> f2 = f.thenApply(new PlusOne());
    System.out.println(f2.get()); // Waits until the "calculation" is done, then prints 2
}


----------
Reactive programming

Much powerful, but hard to understand and debug. Not for simple, small projects. Benefit only shows 
when size grows.

Similarly to Futures, RxJava can be used to string together a bunch of synchronous or asynchronous actions to create a processing pipeline. 
Unlike Futures, which are single-use, RxJava works on streams of zero or more items. Including never-ending streams with an infinite number of items. 

Java 9 introduced class Flow. This class has Publisher, Subscriber, Subscription interfaces.
(What kind of pattern is this with interfaces defined inside a class. Is it a way of
grouping related interface? Though this feature exists wvwn before Java 2)
It is kind of specification for reactive programming in Java. But nobody implemented; it is not that popular. Third party came up with their own set of libraries like ProjectReactor, RxJava. 

Analogy: Iterator and observer patter.
in iterator pattern, the consumer asks for the next element (Pulled by consumer)
      myList.forEach(element -> System.out.println(element))
but in observer pattern, when event occurs, is pushed to consumer.(Pushed to consumer)
      clickChannel.addObserver(event ->System.out.println(event))

The program almost looks same. That is the idea of reactive programming. Pull or Push(nn blocking i/o), your programming model should be the same.

Reactive programming syntax:
clickChannel
    .filter(event -> event != null)
    .subscribe(event ->System.out.println(event))


If you're working within the Spring framework, Spring WebFlux (a module in Spring 5 and later) is built on top of Project Reactor, which means it uses Flux and Mono as its reactive types natively. However, outside of Spring, Project Reactor itself is standalone and can be used in any Java application for reactive programming.


------------
CyclicBarrier vs CountdownLatch 

CountdownLatch 
 A synchronization aid that allows one or more threads to wait until
 * a set of operations being performed in other threads completes.

CyclicBarrier 
 A synchronization aid that allows a set of threads to all wait for
 * each other to reach a common barrier point.  CyclicBarriers are
 * useful in programs involving a fixed sized party of threads that
 * must occasionally wait for each other. The barrier is called
 * <em>cyclic</em> because it can be re-used after the waiting threads
 * are released.

CyclicBarrier takes an (optional) Runnable task which is run once the common barrier condition is met.
For simple use cases - services starting etc... a CountdownLatch is fine.

CountDownlatch is a new mechanism while wait/notify is a old way of co coordinating between threads.


//Runnable as lambda
         Thread t = new Thread(() -> {
            for (int i = 0; i < 10; i++) {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println("thread");
            }
        });
        t.start();
        
//Callable as lambda
        ExecutorService executorService = Executors.newFixedThreadPool(10);
        executorService.submit(() -> {return 1;});//wont compile without {} around return statement
        executorService.shutdown();

Reference - https://www.youtube.com/watch?v=v4cd1O4zkGw

O(1) = constant time
O(n) = Increase linearly - for loop to iterate an array. Increase the size of array, increase the time linearly.
O(n2) = for loop inside a for loop for same array
Now a lawn with side x and y and area a. This can be described both as O(x) or O(y) or O(a2)
What is O(log n)
----------------------
Rules
1. Different steps get added
function something(){
	doStep1(); -- O(a)
	doStep2(); -- O(b)
}

This will result in O(a) + O(b)
--
2.  Drop constants
Find min and max one way-
function minMax1(array){
	min, max = null;
	for each c in array
		min = MIN(c, min );
	for each c in array
		max = MAX(c, max);
}

Find min and max other way-

function minMax1(array){
	min, max = null;
	for each c in array
		min = MIN(c, min );
		max = MAX(c, max);
}

First way is O(n), Second way is O(2n) and not O(n2). So 2 is a constant. Drop it.
So in either way, complexity is O(n).
--
3. Different inputs, different variables

int intersectionSize(arrayA, arrayB){
	int count=0;
	for a in arrayA{
		for b in arrayB{
			if(a==b){
				count += 1;
			}
		}
	}
}

This is not O(n2), this is O(a*b) where 'a' specify size of arrayA, and 'b' specify size of arrayB.

--
4.Drop non-dominate terms

function someFunc(array){
	max = null;
	for each a in array{
		max = MAX(a, max);
	}
	print(max);
	
	for each a in array{
		for each b in array{
			print a,b;
		}
	}
}

This is O(n+n2). Which is same as O(n2). Needs more explanation.






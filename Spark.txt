RDD, DataSet, DataFrame
========================
RDD: Resilient Distribute ...
    Immutable
    Fault tolerent, typesafe.
    Developer needs to take caer of optimization
    Not at good as DataSet in performance
    Not memory efficient
    Joining is not easy
    Connection with Hive isn't easy

Dataframe
    Table abstraction at the top of RDD.
    Inbuild Hive connection
    Auto optimization using Catalist Optimizer
    Performance is better because an execution plan is created before running.
    Not as good as DataSet
    Not type Safe(to achieve optimization)

DataSet
    Type Safe, Autooptimized, Better performance.
    More Memory efficient.
    Encoders - New way of serialize/deserialize.
=======================
Partition vs Bucketing
    Done during write operation for optimization during read. Done by separating the data on some basis then process parallely.
    Use Case: Huge dataset has three columns - name, age, location.
    Solution: Do partitioning by location, then for each partition, do the bucketing by age.
    So total number of files = Number of partition * number of buckets.
    inside the bucket, keep the file format as parquet/OCR to further optimize the read operation.

Bucket in Spark vs Hive:
-------------------------
Hive will shuffle the data during Reduce phase. (Number of reducers = number of buckets.
Spark doesn't use reduce phase. Everything is done in map. No shuffling.

Caculating number of buckets
------------------------------
In HDFS, default size of block is 128 MB. 
So no. of buckets = Size of data in mb/128

Prefer bucketing over partitioning specially to avoid so many small files.
=======================
Repartition vs Coalesce
    When partition size is uneven, some tasks will finish sooner than the otherSo overall time taken will be high
    Repartition and Coalesce rearrage the partition size.
    Repartition do it across machines (too much shuffling), coalesce do it within machine. So coalesce is faster.

=======================

Choice of language
    Scala: Better enterprise acceptance because of familiarity with Java, Type safe, UDFs are better in performance.
    Python: Easier, better ML library(Pandas, Tensorflow, Scifi), visualization library is better. Ecosystem has more contributer.

    

In restful service we have @RestController, @Service, @Repository. Service is injected in controller, 
repository is injected in service, so these objects are created by spring container and injected. 
Who creates object of rest controller? Are they created by servlet container and translated into a servlet?
Where is the Dispatcher/Router? How many object of rest controller is created. If single instance(like traditional servlet), 
then what happens if so many request comes?
Each request becomes a thread. How many threads can be supported?

With typical Controller, Service, Repository I noticed below -
Till I didnot annotate controller with @RestController, I could @Autowire Service.
But when I added @RestController, I had to put @Component at Service class. Why?

12/28/2021 - When I am using  @RestController, @Service, @Repository, dont need anything else like @Bean/@component/@Autowire
==============
During Edit, if there are 5 fields and only 1 field is modified, general implementation requires that caller send all values modified and unmodified. If only modified values are sent, rest are taken as null and those values are lost. How to fix?
====================
Repository

For a typical CRUD implementation, in the pojo, the id has been annoteted with @Id and @Generated.
So while sending POST request, dont need to send the value for id. Even if it is sent, it is redundant. 
Actual id is generated inside jpa which is independent of redundant value sent in the request.
-----
If no generator is specified, then jpa default global generator is used. -

@Entity
public class Product {
    private @Id @GeneratedValue Long id;
    
You may notice the uniqueness of id generated not just with a table but across the tables. 
For specifying private sequence for each table need to use following - 

@Entity
@SequenceGenerator(name="PRODUCT_SEQ", sequenceName="product_sequence")
public class Product {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator="product_sequence")
    private Long id;


=============
Exception Handling
    Caught in controller layer.
    
Logging
Validations

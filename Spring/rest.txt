@RestController combines @Controller and @ResponseBody, so the methods return JSON or XML directly.
-------------

In restful service we have @RestController, @Service, @Repository. Service is injected in controller, 
repository is injected in service, so these objects are created by spring container and injected. 
Q. Who creates object of rest controller? 
A. Spring Boot's ApplicationContext

Q. Are they created by servlet container and translated into a servlet?
A. No, REST Controllers are not directly translated into servlets. DispatcherServlet (provided by Spring) acts as a single entry point for all HTTP requests.

Q. Where is the Dispatcher/Router?
A. The DispatcherServlet is at the core of Spring's web architecture.It is registered as a Servlet in the web application. It acts as a front controller.

Q. How many object of rest controller is created. 
A. Spring creates only one instance (a singleton) of a REST controller by default.

Q.If single instance(like traditional servlet), then what happens if so many request comes?Each request becomes a thread?
A. Spring ensures that the singleton REST controller is thread-safe. Multiple threads can invoke the same controller instance, but each thread operates independently on its own request and response.
Each request is handled by a separate thread. The controller methods are stateless, so there is no risk of interference between threads. Avoid using instance-level variables for request-specific data to prevent thread-safety issues.

Q. How many threads can be supported?
A. depends on the thread pool configuration. Tomcat defaults-
Default max threads: 200
Default core threads: 10
Idle threads timeout: 60 seconds

You can configure the thread pool in application.properties for Spring Boot:
server.tomcat.max-threads=500
server.tomcat.min-spare-threads=50
=======================================================================================

With typical Controller, Service, Repository I noticed below -
Till I didnot annotate controller with @RestController, I could @Autowire Service.
But when I added @RestController, I had to put @Component at Service class. Why?

12/28/2021 - When I am using  @RestController, @Service, @Repository, dont need anything else like @Bean/@component/@Autowire
---------------
12/5/2024 - If you use constructor injection (as in the example below), you do not need @Autowired.
@RestController
public class MyController {
    private final MyService myService;

    public MyController(MyService myService) { // No @Autowired needed
        this.myService = myService;
    }
}


If you use field injection, you must use @Autowired
@RestController
public class MyController {
    @Autowired
    private MyService myService;
}


============

12/5/2024 - When simple CRUD operations are needed, go for RepositoryRestResource. You dont need three layers
of controller, service, repository. Just create RepositoryRestResource with a JPA entity.

==============
During Edit, if there are 5 fields and only 1 field is modified, general implementation requires that caller send all values modified and unmodified.
If only modified values are sent, rest are taken as null and those values are lost. How to fix?
====================
Repository

For a typical CRUD implementation, in the pojo, the id has been annoteted with @Id and @Generated.
So while sending POST request, dont need to send the value for id. Even if it is sent, it is redundant. 
Actual id is generated inside jpa which is independent of redundant value sent in the request.
-----
If no generator is specified, then jpa default global generator is used. -

@Entity
public class Product {
    private @Id @GeneratedValue Long id;
    
You may notice the uniqueness of id generated not just with a table but across the tables. 
For specifying private sequence for each table need to use following - 

@Entity
@SequenceGenerator(name="PRODUCT_SEQ", sequenceName="product_sequence")
public class Product {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator="product_sequence")
    private Long id;

----------
Put notes on how following attribute naming convention you have all possible finder method already implemented.
=============
Exception Handling
    Caught in controller layer.
    
Logging
=============
Validations

JSR-303 bean validation is an specification whose objective is to standardize the validation of Java beans through annotations. 
The objective of the JSR-303 standard is to use annotations directly in a Java bean class.
----
If Springboot use below dependency -
        <dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-validation</artifactId>
	</dependency>
		
-----
Without sprintboot - 
	<dependency>
	    <groupId>javax.validation</groupId>
	    <artifactId>validation-api</artifactId>				--Specification?
	    <version>1.0.0.GA</version>
	</dependency>
	<dependency>
	    <groupId>org.hibernate</groupId>
	    <artifactId>hibernate-validator</artifactId>			-- Implementation?
	    <version>4.3.1.Final</version>
	</dependency>
=================
Transaction
Security

================
12/22
Notes Springboot Implementing restful service with controller/Service/Repository

Q. Difference between findById and getById in Repository?
	findById returns optional. so need to call get() -> object.findById(id).get()

Q. What happens if you miss anotating your service impl class with @service?
	
Q. What if you annotate controller with @Controller and dont put @ResponseBody in your inf front of your get method?
	javax.servlet.ServletException: Circular view path
	
	Either use @RestController or use @Controller with @ResponseBody.
	
Q. Where did the HTTPServlet of javax, Dispatcher of Spring MVC go?
	Here - Showing just few stacks - 
	javax.servlet.http.HttpServlet.service ->
		org.springframework.web.servlet.FrameworkServlet.service ->
			org.springframework.web.servlet.FrameworkServlet.processRequest->
				org.springframework.web.servlet.DispatcherServlet.render ->
					org.springframework.web.servlet.view.InternalResourceView.prepareForRendering

Q. Posting data from postman. What should be content type.
	When sending params in body-
		using form-data 				throws 415 (Content type 'multipart/form-data')
		using raw 						throws 415 (Content type 'text/plain;charset=UTF-8')
		using x-www-form-urlencoded		throws 415 (application/x-www-form-urlencoded)
					
	Need to use raw. Also need to set request type json. (Its available at the end of all radio options)

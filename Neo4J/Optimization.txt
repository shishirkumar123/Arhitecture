Neo4J Optimization

Optimization use case:
Can I create a link list of Keanu Reaves movie order by year?
Can I create additional links like above for optimizing the queries?

Yes, his approach is a form of query optimization because it precomputes 
and stores the order, reducing the need for sorting during query execution.

Steps
--------
Step 1: Identify Keanu Reeves' Movies
-------
MATCH (k:Person {name: "Keanu Reeves"})-[:ACTED_IN]->(m:Movie)
RETURN m.title AS title, m.year AS year
ORDER BY m.year;

Step 2: Create the Relationships
-------
MATCH (k:Person {name: "Keanu Reeves"})-[:ACTED_IN]->(m:Movie)
WITH m
ORDER BY m.year
WITH collect(m) AS movies
FOREACH (i IN range(0, size(movies)-2) |
  FOREACH (current IN [movies[i]] |
    FOREACH (next IN [movies[i+1]] |
      MERGE (current)-[:NEXT]->(next)
    )
  )
);

Step 3: Query the Linked List
-------
MATCH (m:Movie)-[:NEXT*]->(next:Movie)
WHERE m.title = "MovieTitle"
RETURN m.title AS start, collect(next.title) AS orderedList;

======================================
Consideration:
Additional relationships consume more storage space.
If data (e.g., movie year or genre) changes, relationships may need to be updated.
Only create these relationships for queries that are frequent and performance-critical.

================================================================================================

Performance optimization in Neo4j involves a combination of database design, query tuning, and infrastructure setup to ensure efficient execution of graph operations. Here are key techniques to optimize Neo4j performance:

---

1. Optimize Data Model**
1. **Leverage Node Labels and Relationship Types**:
   - Use **specific labels** for nodes (e.g., `:Person`, `:Movie`) to reduce the search space during queries.
   - Use **descriptive relationship types** (e.g., `:ACTED_IN` instead of a generic `:CONNECTED`).

2. **Index and Constraints**:
   - Create indexes on frequently queried properties to speed up lookups.
     ```cypher
     CREATE INDEX FOR (n:Person) ON (n.name);
     ```
   - Use constraints to enforce data integrity and improve query planning.
     ```cypher
     CREATE CONSTRAINT FOR (n:Person) REQUIRE n.name IS UNIQUE;
     ```

3. **Avoid Overloading Node Labels**:
   - Avoid a single label (e.g., `:Entity`) for all nodes. Use labels relevant to the domain.

4. **Denormalize for Performance**:
   - Store frequently accessed properties on related nodes directly, reducing the need for traversals.

5. **Use Relationship Properties**:
   - Add properties (e.g., `weight`, `timestamp`) to relationships to avoid extra computations during traversals.

---

2. Write Efficient Queries**
1. **Avoid Cartesian Products**:
   - Cartesian products occur when patterns are not connected. Always connect patterns with a shared node or relationship.
     ```cypher
     // Avoid
     MATCH (a:Person), (b:Movie)
     RETURN a, b;
     // Better
     MATCH (a:Person)-[:ACTED_IN]->(b:Movie)
     RETURN a, b;
     ```

2. **Use Parameters**:
   - Use **query parameters** to reduce query plan caching overhead.
     ```cypher
     MATCH (n:Person {name: $name}) RETURN n;
     ```

3. **Profile and Explain Queries**:
   - Use `EXPLAIN` to see how the query planner executes the query.
   - Use `PROFILE` to analyze the query's execution time and resources used.
     ```cypher
     PROFILE MATCH (n:Person) RETURN n;
     ```

4. **Reduce Result Set**:
   - Return only necessary data, not entire nodes or relationships.
     ```cypher
     RETURN n.name, n.age;
     ```

---

3. Leverage Indexes and Query Optimization**
1. **Use Full-Text Search Indexes**:
   - Enable full-text search for complex text queries.
     ```cypher
     CREATE FULLTEXT INDEX movieIndex FOR (m:Movie) ON EACH [m.title, m.description];
     ```

2. **Use Composite Indexes**:
   - Combine multiple properties in a single index for compound queries.
     ```cypher
     CREATE INDEX FOR (n:Person) ON (n.name, n.age);
     ```

3. **Query Filters**:
   - Use indexed properties as early filters to reduce the dataset size.
     ```cypher
     MATCH (n:Person)
     WHERE n.age > 30
     RETURN n;
     ```

---

4. Optimize Traversals**
1. **Limit Traversal Depth**:
   - Avoid deep and unrestricted traversals.
     ```cypher
     MATCH (n:Person)-[:FRIEND*1..3]->(m:Person)
     RETURN n, m;
     ```

2. **Choose the Right Start Node**:
   - Begin traversals from indexed nodes to minimize the number of matches.

3. **Precompute Paths**:
   - For frequently used traversals, precompute and store relationships (e.g., a `:SHORTEST_PATH` relationship).

---

5. Manage Write Operations**
1. **Batch Inserts**:
   - For large datasets, batch write operations to avoid transaction overhead.
     ```cypher
     UNWIND $data AS row
     CREATE (n:Node {id: row.id});
     ```

2. **Avoid Heavy Updates**:
   - Minimize updating indexed properties as they are resource-intensive.

---

6. Monitor and Tune Performance**
1. **Use Neo4j Monitoring Tools**:
   - Monitor query execution and resource usage using Neo4j **Ops Manager** or other monitoring tools like Prometheus.

2. **Tune Memory Settings**:
   - Allocate sufficient memory for heap and page cache in the `neo4j.conf` file.
     ```plaintext
     dbms.memory.heap.initial_size=2G
     dbms.memory.pagecache.size=2G
     ```

3. **Enable Query Logging**:
   - Enable slow query logging to identify bottlenecks:
     ```plaintext
     dbms.logs.query.enabled=true
     dbms.logs.query.threshold=1000ms
     ```

---

7. Use Neo4j Features**
1. **Graph Data Science (GDS) Library**:
   - Use GDS for efficient pathfinding, centrality, and clustering algorithms.

2. **Custom Procedures**:
   - Write custom procedures in Java or Python for complex computations.

---

8. Distributed Deployment**
	1. **Sharding**:
	   - For very large datasets, distribute the graph across multiple nodes.

	2. **Read Replicas**:
   - Use read replicas to handle heavy read loads efficiently.

---

9. Cache Results**
	- Cache frequently accessed data in application memory or use Neo4j's built-in caching mechanisms.

---

10. Avoid Overloading Relationships**
	- Keep relationships meaningful. Avoid excessive relationships on a single node (e.g., 1,000,000 relationships on a single `:Person` node).

---
putting conditions directly in the MATCH clause is generally faster than placing 
them in the WHERE clause, especially when the condition involves indexed properties.
Example Optimization**
Original Query:
```cypher
MATCH (a:Person)-[:FRIEND]->(b)-[:FRIEND]->(c)
WHERE a.name = "Alice" AND c.age > 30
RETURN c;
```

Optimized Query:
```cypher
MATCH (a:Person {name: "Alice"})-[:FRIEND]->(b)-[:FRIEND]->(c)
WHERE c.age > 30
RETURN c;
```

---


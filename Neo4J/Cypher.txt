Cypher for fetching data
=============================================
match(n) return n
match(n) return count(n)

SELECT examples
---------------------
match (m:Movie) return m
match (m:Movie) return m.title
match (m:Movie{title:"The Matrix"}) return m
match (m:Movie) return count(m)
match (m:Movie) return count(m) as TotalNoMovies


WHERE examples
---------------------
match (m:Movie) where m.released = 1999
match (m:Movie) where m.released = 1999 return count(m)
match (m:Movie) where m.released > 1999 return count(m)
match (m:Movie) where m.released < 1999 return count(m)
MATCH (a:Movie) WHERE a.released > 1990 AND a.released < 2000 RETURN a
match (p:Person) where p.name = "Jim Cash" return p
match (a:Person) where a.name starts with 'Tom' return a
match (p:Person) -[:WROTE]-> (m:Movie) where p.name = "Jim Cash" return p,m
match (p:Person) -[:DIRECTED]-> (m:Movie) where p.name = "Tom Hanks" return p,m

filter without using WHERE 
--------------------
filter on node example:
MATCH (p:Person)-[]->(m:Movie {title: "The Matrix"}) RETURN p.name, m.title;
filter on relation example:
MATCH (actor:Person)-[:ACTED_IN {roles: "Pops"}]->(movie:Movie {title: "Speed Racer"}) 
RETURN actor.name AS ActorName

Group By examples
---------------------
Number of movies released every year:
match(m:Movie) return m.released, count(m) as TotalNoMovies 

Order By examples
------------------
match(m:Movie) return m order by m.released
match(m:Movie) return m order by m.released asc
match(m:Movie) return m order by m.released desc

Join examples
---------------
match (p:Person) -[]-> (m:Movie) return p,m 
match (p:Person) -[]-> (m:Movie) return p as Person,m as Movie
match (p:Person) -[]-> (m:Movie) return p.name as Person,m.title as Movie
match (p:Person) -[]-> (m:Movie) where m.title = "The Da Vinci Code" return p,m


Relationships example
-----------------------
match (p) -[r]-> (m) return r
MATCH (n) RETURN distinct labels(n)						#Show types of nodes
match(n) -[r]->(m)  return distinct labels(n)			#Show types of nodes which has relation
MATCH (p:Person)-[r]->(m:Movie) RETURN distinct type(r) #Show types of relations
match (p) -[r]-> (m) return distinct type(r)			#same thing
match (p:Person) -[:DIRECTED]-> (m:Movie) return p,m
match (p:Person) -[:WROTE]-> (m:Movie) return p,m
match (p:Person) -[:ACTED_IN]-> (m:Movie) where m.title = "The Da Vinci Code" return p,m
MATCH p=()-[r:REVIEWED]->() RETURN p LIMIT 25
--
NOTE: Neo4j does not support directly changing the type of a relationship (e.g., from WORKS_FOR to WORKS_IN). 
Instead, you need to:
	Create a new relationship of the desired type (WORKS_IN) between the same nodes.
	Delete the old relationship 

MATCH (a)<-[r:WORKS_FOR]-(b)
CREATE (a)<-[newRel:WORKS_IN]-(b)
SET newRel = r  // Copies all properties from the old relationship to the new one
DELETE r
--
Adding another relation between two node which already have a relation:
MATCH (a)<-[r:WORKS_IN]-(b)
CREATE (a)<-[newRel:WORKS_FOR]-(b)


'With' examples
----------------
MATCH (m:Movie) <-[:ACTED_IN]- (p:Person)
WITH m, COUNT(p) AS actorCount
WHERE actorCount > 4
RETURN m.title, actorCount
Order By actorCount desc

Same as -

MATCH (p:Person) -[:ACTED_IN]-> (m:Movie)
WITH m, COUNT(p) AS actorCount
WHERE actorCount > 4
RETURN m.title, actorCount
Order By actorCount desc

Limit examples
------------------------
MATCH (m:Movie) 
WITH m,  SIZE((m)<-[:ACTED_IN]-(p:Person)) AS actorCount 
RETURN m, actorCount 
ORDER BY actorCount DESC 
LIMIT 1; 



Mix queries
------------------------
Join/Group By example: Number of persons in each movie:
match(p:Person) -[]-> (m:Movie) return count(p.name) as NoOfPerson, m.title as Movie
Join/Group By/Order By example: Number of persons in each movie ordered.
match(p:Person) -[]-> (m:Movie) return count(p.name) as NoOfPerson, m.title as Movie order by NoOfPerson desc
match(m:Movie) return m.released as Year, count(m) as TotalNoMovies order by Year

Complex queries
----------------------
Show movie with their number of actor:

	MATCH (p:Person)-[:ACTED_IN]->(m:Movie) 
	WITH m, count(p) AS numAct 
	RETURN m, numAct

	----
Find the movie with at least 3 actor:

	MATCH (p:Person)-[:ACTED_IN]->(m:Movie) 
	WITH m, count(p) AS numAct 
	WHERE numAct > 2
	RETURN m, numAct
	
	----
Retrieve the movies and their actors where one of the actors also directed the movie, 
returning the actors names, the directorâ€™s name, and the movie title:

	MATCH (p1:Person)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(p2:Person)
	WHERE exists( (p2)-[:DIRECTED]->(m) )
	RETURN  p1.name as Actor, p2.name as `Actor/Director`, m.title as Movie

Additional notes
-----------------------
when you create nodes, the database automatically assigns two special attributes to them.
id and elementId.

MATCH (n) WHERE id(n) = 4 RETURN n
MATCH (n) WHERE id(n) = 4 DELETE n

Avoid relying on id(n) for application logic because it is unstable.
Use elementId(n) instead for consistent and reliable querying

MATCH (n) WHERE elementId(n) = '4:59f91b11-1561-430b-82f2-3b3bccb8201e:4' RETURN n;

Index
-----------
CREATE INDEX [IndexName] 
FOR (n:LabelName)
ON (n.propertyName)


Cypher for mutating data
======================================================
Edit
-----
Updating node attribute:
	MATCH (d:Department {name: "dd"}) SET d.name = "Accounts"
	

Updating a relationship:
Neo4j does not support directly changing the type of a relationship 
(e.g., from WORKS_FOR to WORKS_IN). Instead, you need to:
Create a new relationship of the desired type (WORKS_IN) between the same nodes.
Delete the old relationship (WORKS_FOR).

	MATCH (a)<-[r:WORKS_FOR]-(b)
	CREATE (a)<-[newRel:WORKS_IN]-(b)
	SET newRel = r  // Copies all properties from the old relationship to the new one
	DELETE r

Delete
------
match (d:Department{bad:"Junk"}) delete d 

DELETE removes a node only if it has no relationships. else throws error.
DETACH DELETE removes the node and all its relationships.

Merge
-----
#What does it do?
		MERGE (a:Person {name:'Brie Larson'}) 
			ON CREATE SET a.born = 1989 
			ON MATCH SET a.stars = COALESCE(a.stars, 0) + 1
		RETURN a



List of commands
=======================================================
"ALTER"
  "CALL"
  "CREATE"
  "DEALLOCATE"
  "DELETE"
  "DENY"
  "DETACH"
  "DROP"
  "DRYRUN"
  "ENABLE"
  "FOREACH"
  "GRANT"
  "LOAD"
  "MATCH"
  "MERGE"
  "OPTIONAL"
  "REALLOCATE"
  "REMOVE"
  "RENAME"
  "RETURN"
  "REVOKE"
  "SET"
  "SHOW"
  "START"
  "STOP"
  "TERMINATE"
  "UNWIND"
  "USE"
  "USING"
  "WITH"
  
  
Exercise
-------------
#. Show movies written by Jim Cash
#. Show movies directed by 'Tom Hanks'
#. Show movies where more than 7 actors acted.
#. Show types of nodes
#. Show types of nodes which has relation. (Filter node types without relation)
#. Show types of relations
#. Number of movies released every year
#. Show movies on which reviews have been given
#. Show the persons which are not actor
#. Who directed the movie Cloud Atlas







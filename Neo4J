Neo4J


Installation:
	- Install at : C:\dev\installations\Neo4j Desktop
	- Path for application data: C:\Users\shish\.Neo4jDesktop

Neo4J Server runs here - bolt://localhost:7687
Neo4J browser runs here - http://localhost:7474/browser/
		
Queries on default database Movie
	MATCH (n) RETURN (n)
	MATCH (n:Person) RETURN (n)
	MATCH (n:Movie) RETURN (n)
	MATCH (a:Person {name:'Tom Hanks'}) RETURN a
	MATCH (a:Person) WHERE a.name = 'Tom' RETURN a
	MATCH (a:Person) WHERE a.name STARTS WITH 'Tom' RETURN a	
	MATCH (a:Movie) WHERE a.released > 1990 AND a.released < 2000 RETURN a
	MATCH (p:Person)-[]-> (m:Movie) RETURN p,m
	MATCH (p:Person)-[]-> (m:Movie) WHERE p.name STARTS WITH 'Tom' RETURN p,m
	MATCH (p:Person)-[w:WROTE]->(m:Movie) RETURN p,m
	
Advance query
	Show the persons which are not actor

	----
	Show movie with their number of actor:
	MATCH (p:Person)-[:ACTED_IN]->(m:Movie) 
	WITH m, count(p) AS numAct 
	RETURN m, numAct

	----
	Find the movie with at least 3 actor:
	MATCH (p:Person)-[:ACTED_IN]->(m:Movie) 
	WITH m, count(p) AS numAct 
	WHERE numAct > 2
	RETURN m, numAct
	
	----
	Retrieve the movies and their actors where one of the actors also directed the movie, 
	returning the actors names, the directorâ€™s name, and the movie title:
	MATCH (p1:Person)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(p2:Person)
	WHERE exists( (p2)-[:DIRECTED]->(m) )
	RETURN  p1.name as Actor, p2.name as `Actor/Director`, m.title as Movie
	----
	----
Insert:
	CREATE (p:Person) RETURN p -> Why allow a node without an attribute?
	CREATE (a:Person {name:'Brie Larson', born:1989}) RETURN a
	Create a new actor, acted in one of the existing Movie
	----
	Delete:
		MATCH (a:Person {name:'Brie Larson'}) DETACH DELETE a 
		MATCH (a) DETACH DELETE a --deletes everything
	----
	???:
		MERGE (a:Person {name:'Brie Larson'}) 
			ON CREATE SET a.born = 1989 
			ON MATCH SET a.stars = COALESCE(a.stars, 0) + 1
		RETURN a
	----
	Update:
		MATCH (a:Person {name:'Brie Larson'}), (b:Movie {title:'Captain Marvel'})
			MERGE (a)-[r:ACTED_IN]->(b) 
			SET r.roles = [x in r.roles WHERE x <> 'Captain Marvel'] + ['Captain Marvel']
		RETURN a,r,b
	----
	List movies with actor Tom Hanks
		MATCH (a:Person {name:'Tom Hanks'})-[:ACTED_IN]->(m:Movie) RETURN a,m
	----
	Who directed the movie Cloud Atlas
		MATCH (m:Movie {title:'Cloud Atlas'})<-[:DIRECTED]-(d:Person) RETURN d
	----
	List on ACTED_ON relationship not others like DIRECTED
		MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)
		WHERE p.name='Tom Hanks'
		RETURN p, a, m
	----
	Movies and actors up to 4 "hops" away from Kevin Bacon
		MATCH (bacon:Person {name:"Kevin Bacon"})-[*1..4]-(hollywood)
		RETURN DISTINCT hollywood
	The shortest path following any relationship from Kevin Bacon to Al Pacino
	----
	MATCH p=shortestPath(
              (bacon:Person {name:"Kevin Bacon"})-[*]-(a:Person {name:'Al Pacino'})
            )
	RETURN p
	----
	Extend co-actors, to find co-co-actors who haven't worked with Tom Hanks
	MATCH (a:Person {name:'Tom Hanks'})-[:ACTED_IN]->(m)<-[:ACTED_IN]-(coActors),
		  (coActors)-[:ACTED_IN]->(m2)<-[:ACTED_IN]-(cocoActors)
	WHERE NOT (a)-[:ACTED_IN]->()<-[:ACTED_IN]-(cocoActors) AND a <> cocoActors
	RETURN cocoActors.name AS Recommended, count(*) AS Strength ORDER BY Strength DESC
	----
	Find someone to introduce Tom Hanks to Tom Cruise
	MATCH (a:Person {name:'Tom Hanks'})-[:ACTED_IN]->(m)<-[:ACTED_IN]-(coActors),
	(coActors)-[:ACTED_IN]->(m2)<-[:ACTED_IN]-(other:Person {name:'Tom Cruise'})
	RETURN a, m, coActors, m2, other
	----
	// Count Person nodes
	MATCH (p:Person) RETURN count(*)
	
	// Count all nodes
	MATCH (n) RETURN count(n)
	----

	//Count relations between Person and Movie
	MATCH (p:Person) -[]-> (m:Movie) RETURN count(*)
	----

	// Count all relationships
	MATCH ()-[]->() RETURN count (*)
	----

	MATCH (n1)-[r]->(n2) RETURN r, n1, n2 LIMIT 2
=================================================================================
MATCH (p1:Person) -[a1:REVIEWED]-> (m:Movie) RETURN p1,m


MATCH (p1:Person) -[a1:ACTED_IN]-> (m:Movie)  RETURN p1,m    								----Returns 102 Person
Seems like the above return Movies with Actors. It will exclude movies that doesn't have director

MATCH (p1:Person) -[a1:ACTED_IN]-> (m:Movie) <-[a2:DIRECTED]- (p2:Person)  RETURN p1,m, p2  ----Returns 125 Person
Seems like the above return Movies with Actors and/or Directors. 

How to query movies with no attached director?
How to query movies with actors and/or directors and/or reviewers. 
I can put forward arrow (->) for one relation, I can put (<-) for another relation, what if there are more relation to be considered?


----An id is automatically created as an attribute for each node.
CREATE (a:Person {name:'A', born:1900}) RETURN a -- I can repeat the same statement. It will create node with different id.
CREATE (a:Movie {name:'Silsila', year:1982}) RETURN a
How to create relationship between 2 existing nodes?
CREATE (a:Person {name:'A', born:1900}) -[r:ACTED_IN]-> (m:Movie {name:'Silsila', year:1982}) RETURN a -- This is working when nodes and relations all are new. 

----------------------
Create nodes first and then relations:
create(e:Employee{name:"Sumedh", age:42})
create(e:Employee{name:"Vishu", age:44}) return e
create(e:Employee{name:"Pikloo", age:46})
create(e:Employee{name:"Saket", age:46})

create(d:Department{name:"Sales", code:"30"})
create(d:Department{name:"HR", code:"20"})
create(d:Department{name:"Accounts", code:"10"})

create (Saket) -[:WORKS_IN]->(HR)  - This has actually created 2 new nodes with 1 new relation
---
The above block is wrong. Below is how to do it -

---
create(E1001:Employee{name:"Vishu", age:44})
create(E2001:Employee{name:"Sumedh", age:42})
create(E3001:Employee{name:"Pikloo", age:46})
create(E3002:Employee{name:"Saket", age:46})

create(D10:Department{name:"Sales", code:"30"})
create(D20:Department{name:"HR", code:"20"})
create(D30:Department{name:"Accounts", code:"10"})

create (E1001) -[:WORKS_IN]->(D10)
create (E2001) -[:WORKS_IN]->(D20)
create (E3001) -[:WORKS_IN]->(D30)
create (E3002) -[:WORKS_IN]->(D30)
---
create(1001:Employee{name:"Vishu", age:44}) -- This gives syntax error. Why numbers are nhot allowed? In this case 1001.


=====================================================================

CREATE INDEX [IndexName] 
FOR (n:LabelName)
ON (n.propertyName)

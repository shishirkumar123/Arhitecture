DDD - Domain Driven Design
CQRS - Comman and Query Responsibility Segregation
ES - Event Sourcing

============================
Domain Driven Design
Aggregate
        Structure
             Aggregate Id
	     Collection of multiple entities and value objects
        Group of related Commands
              Makes changes to aggregates
        Commands generate events

Entities
        An object that is not fundamentally defined by its attributes, but rather by a thread of continuity and identity
        Has their own identity

Value Object
	Doesnt have identity

Commands
         place where business rules are applied?
         Do they have an id?

Events
	generated due to commands
	They have an id
        Events hydrate the aggregates.
	Events are 

When serires of events create/changes aggregate state, the first event usually creates aggregate and set aggregate id from event id.



=============================
CQRS
Command refers to write operation. Query refers to read operation.
In many applications read operations are much more than write operations - amazon, flipcart etc.
Disadvantage with traditional CRUD kind of service which combines read write at the same place -
 - performance issue with so many reads
 - if another microservice wants to read from this microservice, 
	e.g purchase-order microservice,
	and wants to fetch all orders of a user, performance wont be good. 
		(looping through each order id and multiple times calling the microservice order	
		 write complex query in product microservice.
 - Can't apply security/transaction if needs to be applied only during writing. It will get applied to	
	both again leading to performance issue.
	
Solution
	Separate Read write microservice. 
	So instead of Product microservice, create 
		- Product-Read(GET) with its own database 
		- Product-Write(POST, PUT, DELETE) microservice with its own database. Why database needed here?
	Have messageging system like Kafka between two microservice
	How to ensure whether write database and kafka topic in sync?
	
	
	-----------------------

Implementation 1: Using Axon Framework: https://www.baeldung.com/axon-cqrs-event-sourcing
Implementation 2: Using Kafka

==========================
Event Sourcing
Event sourcing is an approach for tracking changes to application state, stored as a sequence of events. Each change is associated with an event, which contains the timestamp and nature of the specific change.

Event Sourcing is a design pattern in which results of business operations are stored as a series of events.

It is an alternative way to persist data. In contrast with state-oriented persistence that only keeps the latest version of the entity state, Event Sourcing stores each state change as a separate event.
=================
Implementing DDD, CQRS, Event sourcing using Axon
==================================================

EventHandlers are mutating data in postgres
CommandHandlers are creating Events, which is directly going into mongodb
EventSourcingHandlers are only to update the in-memory state of the Aggregate in Axon Server

If computation needs to be done before storing the events in the event store, 
then EventSourcingHandler is the candidate 
For ex: do validations and ignore bad events completely if needed . 
EventHandler aggregates all events and creates the projection and store it in db. 
So, if a computation is required before creating projection , choose the EventHandler.

If it is some business logic or validation, you do that prior to creating Event in the Aggregate
if it is related to access checks, controller
